@model advt.CMS.Models.ExamDataModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    #app {
        padding: 20px 30px
    }
    .el-dialog {
        width: 80%;
    }
</style>
<div id="app" style="margin-left:20px">
    <template>
        <el-breadcrumb separator="/" style="margin-top:20px;margin-bottom:20px">
            <el-breadcrumb-item>考试报表</el-breadcrumb-item>
            <el-breadcrumb-item>考试数据管理</el-breadcrumb-item>
        </el-breadcrumb>

    </template>
    <div>
        <el-select v-model="TypeNames" placeholder="请选择考试类型">
            <el-option v-for="item in LExamType" :key="item.Key" :label="item.Value" :value="item.Key"></el-option>
        </el-select>
        <el-button slot="append" @@click="SearchinByTypeName">
            <template>
                Search
            </template>
        </el-button>
    </div>
    <div id="hostChart" style="width:100%;height:350px"></div>
    <div v-if="ListElectronicUserView.length!=0"> 
        <template>
            <el-table :data="ListElectronicUserView" height="550"
                      style="width: 100%;margin-top:20px ">

                <el-table-column label="考试科目"
                                 prop="SubjectName" sortable>
                </el-table-column>
                <el-table-column label="HC"
                                 prop="HC">
                </el-table-column>
                <el-table-column label="现有人数"
                                 prop="CurrentNumber" sortable>
                </el-table-column>
                <el-table-column label="比例"
                                  sortable>
                    <template slot-scope="scope">
                        <span>{{scope.row.Ratio}}%</span>
                </template>
                </el-table-column>
                <el-table-column label="缺额"
                                 prop="Vacancy" sortable>
                </el-table-column>
                <el-table-column label="对应津贴"
                                 prop="ElectronicQuota" sortable>
                </el-table-column>
                <el-table-column fixed="right"
                                 label="操作"
                                 width="240">
                    <template slot-scope="scope">
                        <el-button size="mini"
                                   @@click="handleDetail(scope.row.SubjectName,scope.row.CurrentNumber,scope.row.Vacancy)">查看明细</el-button>
                        <el-button size="mini"
                                   @@click="handleInsertOpen(scope.row.SubjectName,scope.row.Vacancy)">添加</el-button>

                    </template>
                </el-table-column>
        </el-table>


        </template>
        <template>
            @*人员明细弹窗*@
            <el-dialog title="明细查看" :visible.sync="dialogSearchVisible" :close-on-click-modal="false" >
                <el-form :inline="true" class="demo-form-inline">
                    <el-form-item label="现有人数">
                        <el-input v-model="VSearchInfo.CurrentNumber" :disabled="true"></el-input>
                    </el-form-item>
                    <el-form-item label="缺额">
                        <el-input v-model="VSearchInfo.Vacancy" :disabled="true"></el-input>
                    </el-form-item>
                </el-form>
                <el-table :data="ListElectronicUser"
                          style="width: 100%;margin-top:20px " border>

                    <el-table-column label="部门"
                                     prop="DepartCode" sortable>
                    </el-table-column>
                    <el-table-column label="工号"
                                     prop="UserCode">
                    </el-table-column>
                    <el-table-column label="姓名"
                                     prop="UserName" sortable>
                    </el-table-column>
                    <el-table-column label="岗位"
                                     prop="PostID" sortable>
                    </el-table-column>
                    <el-table-column label="状态"
                                     sortable>
                       
                        <template slot-scope="scope">
                            <span v-if="scope.row.EStatus==true">已录取</span>
                            <span v-if="scope.row.EStatus==false">已报名</span>
                        </template>

                    </el-table-column>
                    <el-table-column label="取得津贴时间"
                                     sortable>
                        <template slot-scope="scope">
                            <span>{{changeDate(scope.row.CreateDate)}}</span>
                        </template>
                    </el-table-column>
                    <el-table-column label="对应津贴额度"
                                     prop="ElectronicQuota">
                    </el-table-column>
                    <el-table-column fixed="right"
                                     label="操作">
                        <template slot-scope="scope">
                            <el-button type="primary" @@click="handleDelete(scope.row.ID)">取消</el-button>
                        </template>
                    </el-table-column>
                </el-table>
            </el-dialog>
            @*添加新人员*@
            <el-dialog title=新增 :visible.sync="dialogInsertViewVisible" :close-on-click-modal="false">
                <el-form :inline="true" class="demo-form-inline">
                    <el-form-item label="考试科目">
                        <el-input v-model="VSearchInfo.SubjectName" :disabled="true"></el-input>
                    </el-form-item>
                    <el-form-item label="缺额">
                        <el-input v-model="VSearchInfo.Vacancy" :disabled="true"></el-input>
                    </el-form-item>
                </el-form>
                <el-form :inline="true" class="demo-form-inline">
                    <el-form-item label="部门/工号/姓名">
                        <el-input v-model="SearchData"></el-input>
                    </el-form-item>
                    <el-form-item>
                        <el-button type="primary" @@click="handleSearchUser(VSearchInfo.SubjectName)">查询</el-button>
                    </el-form-item>
                </el-form>
                <el-table :data="ListUsers"
                          style="width: 100%;margin-top:20px " border>
                    <el-table-column label="部门"
                                     prop="UserCostCenter" sortable>
                    </el-table-column>
                    <el-table-column label="工号"
                                     prop="UserCode">
                    </el-table-column>
                    <el-table-column label="姓名"
                                     prop="UserDspName" sortable>
                    </el-table-column>
                    <el-table-column fixed="right"
                                     label="操作">
                        <template slot-scope="scope">
                            <el-button type="primary" @@click="handleSigup(scope.row.UserCode,scope.row.UserCostCenter)">添加</el-button>

                        </template>
                    </el-table-column>


                </el-table>


            </el-dialog>
        </template>
    </div>
</div>
<script src="~/Scripts/Vue/Vue.js"></script>
<script src="~/Scripts/Vue/axios.js"></script>
<script src="~/Scripts/elementUI/lib/index.js"></script>
<script src="~/Scripts/Vue/polyfill.min.js"></script>
<script src="~/Scripts/echarts.js"></script>
<script type="text/javascript">
    new Vue({
        el: '#app',
        data: {
            LExamType: [],
            TypeNames: '',
            SubjectNames:'',
            ListElectronicUser: [],
            ListElectronicUserView: [],
            dialogSearchVisible: false,
            dialogInsertViewVisible: false,
            ListInsertUser: [],
            VSearchInfo: {},
            SearchData: '',
            ListUsers: []
           
        
          
        },
        mounted: function () {
            
            this.getdata();
        },
        created() {

        },
        methods: {
            handleDelete(ID) {
                var _this = this;
                _this.$confirm('此操作将取消人员津贴,请确认是否执行', '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(() => {
                    axios.post('/Report/DeleteElectronicUser', {
                        ID: ID,
                        SubjectNames: _this.SubjectNames,
                        typename: _this.TypeNames
                    }).then(function (res) {
                        _this.ListElectronicUser = res.data.ListElectronicUser;
                        _this.ListElectronicUserView = res.data.ListElectronicUserView;
                        if (res.data.success == true) {
                            _this.VSearchInfo.CurrentNumber = _this.VSearchInfo.CurrentNumber - 1;
                            _this.VSearchInfo.Vacancy = _this.VSearchInfo.Vacancy + 1;
                            _this.getchats();
                        }

                    });
                }).catch(() => {
                    _this.$message({
                        type: 'info',
                        message: '已取消操作'
                    });
                });
               
            },
            //报名
            handleSigup(usercode, UserCostCenter) {
                var _this = this;
                if (_this.VSearchInfo.Vacancy > 0) {
                    axios.post('/Report/GetSigupElectronicUser', {
                        usercode: usercode,
                        UserCostCenter: UserCostCenter,
                        SubjectName: _this.VSearchInfo.SubjectName,
                        sdata: _this.SearchData,
                        typename: _this.TypeNames
                    }).then(function (res) {
                        _this.ListUsers = res.data.ListUsers;
                        _this.ListElectronicUserView = res.data.ListElectronicUserView;
                        if (res.data.success == true) {
                            _this.VSearchInfo.Vacancy = _this.VSearchInfo.Vacancy - 1;
                            _this.getchats();
                        }
                    });
                } else {
                    alert("人员已满，不可报名");
                }
               
            },
            handleSearchUser(SubjectName) {
                var _this = this;
                axios.post('/Report/GetExamUserBySubjectName', {
                    SearchData: _this.SearchData,
                    subject: SubjectName
                }).then(function (res) {
                    _this.ListUsers = res.data.ListUsers;
                   
                });
            },
            //添加页面要清除
            handleInsertOpen(SubjectName, Vacancy) {
                var _this = this;
                _this.VSearchInfo.SubjectName = SubjectName;
                _this.VSearchInfo.Vacancy = Vacancy;
                _this.SearchData = '';
                _this.ListUsers = [];
                _this.dialogInsertViewVisible = true;
            },
            //查看明细
            handleDetail(typename, CurrentNumber, Vacancy) {
                var _this = this;
                _this.SubjectNames = typename;
                _this.VSearchInfo.CurrentNumber = CurrentNumber;
                _this.VSearchInfo.Vacancy = Vacancy;
                axios.post('/Report/GetExamByTypeName', {
                    typename: typename
                }).then(function (res) {
                    _this.ListElectronicUser = res.data.ListElectronicUser;
                });
                _this.dialogSearchVisible = true;
            },
            SearchinByTypeName() {
                var _this = this;
                axios.post('/Report/GetExamInfo', {
                    typename: _this.TypeNames
                }).then(function (responese) {
                   
                    _this.ListElectronicUserView = responese.data.ListElectronicUserView;
                    _this.getchats();
                   
                });

            },
            getchats: function () {
                var _this = this;

                var chartDom = document.getElementById('hostChart');
                var myChart = echarts.init(chartDom);
                var dateList = _this.ListElectronicUserView.map(function (item) {
                    return item.SubjectName;
                });
                var vluelist = _this.ListElectronicUserView.map(function (item) {
                    return item.Ratio;
                });
                myChart.clear();
                option = {
                    grid: {
                        y2:150
                    },
                    xAxis: {
                        type: 'category',
                        data: dateList,
                        axisLabel: {
                            interval: 0,
                            rotate: 90
                        },
                        splitArea: {
                            show: true
                        }
                    },
                    yAxis: {
                        min: 0,
                        max: 120,
                        type: 'value'
                    },
                    series: [
                        {
                            data: vluelist,
                            type: 'bar'
                        }
                    ]
                    
                };
                option && myChart.setOption(option);
            },
            changeDate: function (dates) {
                var date = new Date(parseInt(dates.replace("/Date(", "").replace(")/", ""), 10));
                Y = date.getFullYear() + '-';
                M = (date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1) + '-';
                D = (date.getDate() < 10 ? '0' + (date.getDate()) : date.getDate()) + ' ';
                h = (date.getHours() < 10 ? '0' + (date.getHours()) : date.getHours()) + ':';
                m = (date.getMinutes() < 10 ? '0' + (date.getMinutes()) : date.getMinutes()) + ':';
                s = (date.getSeconds() < 10 ? '0' + (date.getSeconds()) : date.getSeconds());
                var NewDtime = Y + M + D + h + m + s;
                var listDate = new Date(date);
                var year = listDate.getFullYear();
                var mon = listDate.getMonth() + 1;
                var day = listDate.getDate();
                //console.log(new Date(date).getFullYear())
                return year + '-' + mon + '-' + day;
            },
            getdata: function () {
                var _this = this;
                axios.post('/PEMain/GetSubjectInfo').then(res => {
                    _this.LExamType = res.data.LExamType;
                })

            }
        }

    })


</script>

