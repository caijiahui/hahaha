@model advt.CMS.Models.ExamModel.ExamRuleModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link href="~/Scripts/jquery-ui.min.css" rel="stylesheet" />
<script src="~/Scripts/jquery-ui.min.js"></script>
<link href="~/Scripts/elementUI/lib/theme-chalk/index.css" rel="stylesheet" />
<style>
    .topie {
        width: 50px;
    }
</style>
<div id="app" style="margin-left:20px">
    <div>

        <template>
            <el-breadcrumb separator="/" style="margin-top:20px;margin-bottom:20px">
                <el-breadcrumb-item>考试管理</el-breadcrumb-item>
                <el-breadcrumb-item>考试规则</el-breadcrumb-item>
            </el-breadcrumb>
            <el-select v-model="TypeName" placeholder="请选择考试类型">
                <el-option v-for="item in LExamType" :key="item.Key" :label="item.Value" :value="item.Key"></el-option>
            </el-select>
            <el-input placeholder="考试科目" v-model="ExamSubject" style="width:200px">
            </el-input>
                <el-input placeholder="规则名" v-model="Rule" style="width:200px">
                </el-input>
                <el-button slot="append" @@click="SearchinByRule">Search</el-button>
                <el-button @@click="createRule">新增</el-button>
        </template>

        <el-table :data="tableData.filter(data => !search || data.RuleName.toLowerCase().includes(search.toLowerCase())||data.TypeName.toLowerCase().includes(search.toLowerCase())||data.SubjectName.toLowerCase().includes(search.toLowerCase()))"
                  style="width: 100% " :default-sort="{prop: 'RuleName'||'TypeName'||'SubjectName', order: 'CreateUser'}">
            <el-table-column label="规则名字" prop="RuleName" sortable width="120"></el-table-column>
            <el-table-column label="考试类型" prop="TypeName" sortable width="120"></el-table-column>
            <el-table-column label="考试科目" prop="SubjectName" sortable width="120"></el-table-column>
            <el-table-column label="总分" prop="TotalScore" sortable width="120"></el-table-column>
            <el-table-column label="总时长" prop="TotalTime" sortable width="120"></el-table-column>
            @*<el-table-column label="总题" prop="TotalSubject" sortable width="120"></el-table-column>*@
            <el-table-column label="通过分数" prop="PassScore" sortable width="120"></el-table-column>
            @*<el-table-column label="是否批阅" prop="IsRead" sortable width="120"></el-table-column>
                <el-table-column label="是否重考" prop="IsRepeat" sortable width="120"></el-table-column>
                <el-table-column label="开头" prop="StartDeac" sortable width="120"></el-table-column>
                <el-table-column label="结尾" prop="EndDesc" sortable width="120"></el-table-column>*@
            <el-table-column align="right">
                <template slot="header" slot-scope="scope">
                    <el-input v-model="search" size="mini" placeholder="输入关键字搜索" style="width:200px" />
                </template>
                <template slot-scope="scope">
                    <el-button size="mini"
                               @@click="handleEdit(scope.row.ID,scope.row.RuleName,scope.row.TypeName,scope.row.SubjectName,scope.row)">Edit</el-button>
                    <el-button size="mini"
                               type="danger"
                               @@click="handleDelete(scope.row.ID, scope.row)">Delete</el-button>
                </template>
            </el-table-column>
        </el-table>
        <el-pagination @@size-change="handleSizeChange"
                       @@current-change="handleCurrentChange"
                       :current-page="paginations.page_index"
                       :page-sizes="paginations.page_sizes"
                       :page-size="paginations.page_size"
                       :layout="paginations.layout"
                       :total="paginations.total">
        </el-pagination>
        <el-dialog title="考试规则编辑" :visible.sync="dialogFormVisible" :close-on-click-modal="false">
            <el-form :model="VExamRule" ref="dialogForm" :rules="ruleform" :label-position="labelPosition">
                <el-form-item label="考试类型" prop="TypeName">
                    <el-select v-model="VExamRule.TypeName" placeholder="请选择考试类型">
                        <el-option v-for="item in ListTypeName" :key="item.TypeName" :label="item.TypeName" :value="item.TypeName"></el-option>
                    </el-select>
                </el-form-item>
                <el-form-item label="考试科目" prop="SubjectName">
                    <el-select v-model="VExamRule.SubjectName" placeholder="请选择考试科目">
                        <el-option v-for="item in ListSubjectName" :key="item.SubjectName" :label="item.SubjectName" :value="item.SubjectName"></el-option>
                    </el-select>
                </el-form-item>
                <el-form-item label="题目类型" prop="ListTopicInfo">
                    <el-select v-model="topicratioPropsVal" multiple @@change="topicratioPropsFn" placeholder="请选择">
                        <el-option v-for="item in ListTopicInfo"
                                   :key="item.ID"
                                   :label="item.TopicMajor+item.TopicLevel+item.TopicType+'-'+item.Bcount"
                                   :value="item.ID">
                        </el-option>
                    </el-select>
                </el-form-item>
                <template>
                    <el-table :data="RuleGrList" style="width:100%">
                        <el-table-column prop="TopicMajor" label="类型" width="80"></el-table-column>
                        <el-table-column prop="TopicLevel" label="等级" width="80"></el-table-column>
                        <el-table-column prop="TopicType" label="题型" width="80"></el-table-column>


                        <el-table-column prop="TopicNum" label="题数" width="80">
                            <template slot-scope="scope">
                                <el-input v-model="scope.row.TopicNum" class="topie"></el-input>
                            </template>
                        </el-table-column>
                        <el-table-column prop="TopicScore" label="分数" width="80">
                            <template slot-scope="scope">
                                <el-input v-model="scope.row.TopicScore" class="topie"></el-input>
                            </template>
                        </el-table-column>

                        <el-table-column label="操作" width="120">
                            <template slot-scope="scope">
                                <el-button @@click.native.prevent="deleteRow(scope.$index,scope.row.TopicMajor,scope.row.TopicLevel,scope.row.TopicType,VExamRule.RuleName,VExamRule.ID,RuleGrList)"
                                           type="text"
                                           size="small">
                                    移除
                                </el-button>
                            </template>
                        </el-table-column>
                    </el-table>
                </template>
                <el-form-item label="规则名" prop="RuleName">
                    <el-input v-model="VExamRule.RuleName"></el-input>
                </el-form-item>
                <el-form-item label="总分" prop="TotalScore">
                    <el-input v-model="VExamRule.TotalScore"></el-input>
                </el-form-item>
                <el-form-item label="总时长(Min)" prop="TotalTime">
                    <el-input v-model="VExamRule.TotalTime"></el-input>
                </el-form-item>

                <el-form-item label="通过分数" prop="PassScore">
                    <el-input v-model="VExamRule.PassScore"></el-input>
                </el-form-item>
                <el-form-item label="是否批阅" prop="IsRead">
                    <el-switch v-model="VExamRule.IsRead"></el-switch>
                </el-form-item>
                <el-form-item label="问卷调查" prop="IsQuestion">
                    <el-switch v-model="VExamRule.IsQuestion"></el-switch>
                </el-form-item>
                <el-form-item label="是否重考" prop="IsRepeat">
                    <el-switch v-model="VExamRule.IsRepeat"></el-switch>
                </el-form-item>
                <el-form-item label="标头" prop="StartDeac">
                    <el-input type="textarea" v-model="VExamRule.StartDeac"></el-input>
                </el-form-item>
                <el-form-item label="结尾" prop="EndDesc">
                    <el-input type="textarea" v-model="VExamRule.EndDesc"></el-input>
                </el-form-item>
            </el-form>
            <div slot="footer" class="dialog-footer">
                <template>
                    <el-button @@click="dialogFormVisible = false">取 消</el-button>
                    <el-button type="primary" @@click="handleSave">确 定</el-button>
                </template>

            </div>
        </el-dialog>

    </div>
</div>
<script src="~/Scripts/Vue/axios.js"></script>
<script src="~/Scripts/Vue/Vue.js"></script>
<script src="~/Scripts/elementUI/lib/index.js"></script>

<script src="~/Scripts/Vue/polyfill.min.js"></script>
<script type="text/javascript">
    new Vue({
        el: '#app',
        data: {
            topicratioProps: { multiple: true, label: 'Text', },
            tableData: [],
            dialogFormVisible: false,
            iscount: false,
            ListTypeName: [],
            VExamRule: [],
            VRuleGrList: [],
            ListTopicInfo: [],
            ListSubjectName: [],
            formLabelWidth: '120px',
            search: '',
            topicratioPropsVal: [],
            RuleGrList: [],
            labelPosition: 'right',
            RuleName: '',
            TotalScore: '',
            TotalTime: '',
            TotalSubject: '',
            PassScore: '',
            Rule: '',
            TypeName: '',
            ExamSubject: '',
            LExamType: [],
            ListSearchSubject: [],
            ruleform: {
                RuleName: [
                    { required: true, message: '请输入规则名字', trigger: 'blur' }
                ],
                TotalScore: [
                    { required: true, message: '请输入总分', trigger: 'blur' }
                ],
                TotalTime: [
                    { required: true, message: '请输入考试时长', trigger: 'blur' }
                ],
                TotalSubject: [
                    { required: true, message: '请输入题目总数', trigger: 'blur' }
                ],
                PassScore: [
                    { required: true, message: '请输入通过分数', trigger: 'blur' }
                ]
            },
            paginations: {
                page_index: 1,
                total: 0,
                page_size: 10,
                page_sizes: [10, 15, 20],
                layout: 'total, sizes, prev, pager, next, jumper'
            },
            allTableData: []
        },
        watch: {
            'VExamRule.TypeName': function (newval) {
                var _this = this;
                //axios.post('/PEMain/GetSubjectName', {
                axios.post('/PEMain/GetRuleTypeName', {
                    model: newval
                }).then(response => {
                    _this.ListSubjectName = response.data.ListSubjectName;
                    _this.ListTopicInfo = response.data.ListTopic;
                    console.log(response.data.ListTopic);
                });
            },
            'VExamRule.SubjectName': function (newval) {
                var _this = this;
                _this.ListTopicInfo = [];
                axios.post('/PEMain/GetRuleSubjectName', {
                    model: newval
                }).then(response => {
                    console.log(response.data.ListTopic);
                    _this.ListTopicInfo = response.data.ListTopic;
                });
            }           
        },
        mounted: function () {
            this.getInfoList();
        },
        methods: {
            getInfoList() {
                var _this = this;
                axios.post('/PEMain/GetRuleInfo').then(res => {
                    _this.tableData = res.data.tableData;
                    _this.LExamType = res.data.LExamType;
                    _this.VExamRule = res.data.VExamRule;
                    _this.setPaginations();

                })
            },
            setPaginations() {
                var _this = this;
                _this.paginations.total = _this.tableData.length; //数据的数量

                _this.paginations.page_index = 1; //默认显示第一页
                _this.paginations.page_size = 10; //每页显示多少数据

                //显示数据
                _this.tableData = _this.tableData.filter((item, index) => {
                    return index < _this.paginations.page_size;
                })
            },
            handleSizeChange(page_size) {
                var _this = this;
                _this.paginations.page_index = 1; //第一页
                _this.paginations.page_size = page_size; //每页先显示多少数据
                _this.tableData = _this.tableData.filter((item, index) => {
                    return index < page_size
                })
            },
            handleCurrentChange(page) {

                var _this = this;
                axios.post('/PEMain/GetRuleInfo', {
                    ExamType: _this.TypeName,
                    SubjectName: _this.ExamSubject,
                    RuleName: _this.Rule
                }).then(res => {
                    _this.tableData = res.data.tableData;
                    let index = _this.paginations.page_size * (page - 1);
                    //获取总数
                    let allData = _this.paginations.page_size * page;
                    console.log(_this.tableData, index, allData);
                    let tablist = [];
                    for (let i = index; i < allData; i++) {
                        if (_this.tableData[i]) {
                            tablist.push(_this.tableData[i]);
                        }
                    }
                    _this.tableData = tablist;
                })

            },
            topicratioPropsFn: function (val) {
                var _this = this;
                _this.RuleGrList = [];
                val.forEach(function (lst, num) {
                    _this.ListTopicInfo.forEach(function (item, index) {
                        if (item.ID == lst)
                            _this.RuleGrList.push(item);
                    })
                })

            },
            createRule: function () {
                this.topicratioPropsVal = [];
                var _this = this;
                axios.post('/PEMain/GetSubjectList').then(response => {
                    _this.ListTypeName = response.data.ListTypeName;
                    _this.VExamRule = {};
                    _this.RuleGrList = [];

                });
                _this.dialogFormVisible = true;
            },
            handleSave: function () {
                var _this = this;
                _this.$refs.dialogForm.validate(function (valid) {
                    if (valid) {
                        _this.iscount = false;
                        //题数配比
                        _this.ListTopicInfo.forEach(item => {
                            _this.RuleGrList.forEach(o => {
                                if (item.TopicMajor == o.TopicMajor && item.TopicLevel == o.TopicLevel && item.TopicType == o.TopicType) {
                                    if (o.TopicNum > item.Bcount) {
                                        _this.iscount = true;
                                        _this.$alert('题目类型设置的题数不可大于题库对应下的题数!')
                                    }

                                }
                            })
                        })

                        if (_this.iscount == false) {
                            //判读题数分数之和
                            var numscore = 0;
                            _this.RuleGrList.forEach(function (item, index) {
                                numscore += item.TopicNum * item.TopicScore;
                            })
                            if (numscore == _this.VExamRule.TotalScore) {
                                if (parseFloat(_this.VExamRule.TotalScore) >= parseFloat(_this.VExamRule.PassScore))
                                {
                                    var objs = {};
                                    objs.VExamRule = _this.VExamRule;
                                    objs.RuleGrList = _this.RuleGrList;
                                    axios.post('/PEMain/SaveRuleInfo', {
                                        model: objs,
                                    }).then(function (res) {
                                        if (res.data.Result != '') {
                                            _this.$message.error(res.data.Result);
                                        } else {
                                            _this.tableData = res.data.tableData;
                                            _this.RuleGrList = res.data.RuleGrList;
                                            _this.setPaginations();
                                        }
                                    });
                                    _this.dialogFormVisible = false;
                                    _this.RuleGrList = [];
                                    _this.ListTopicInfo = [];
                                }

                                else {
                                    _this.$alert('通过分数不可大于总分，请检查')
                                }
                               
                            }
                            else { _this.$alert('题目类型总分不等于设定的总分，请检查') }
                        }


                    } else {
                        console.log('error submit!!');
                        return false;
                    }
                });


            },
            handleEdit(index, RuleName, TypeName, SubjectName, row) {
                var _this = this;
                _this.VExamRule.RuleName = row.RuleName;
                _this.VExamRule.TypeName = row.TypeName;
                _this.VExamRule.SubjectName = row.SubjectName;
                _this.VExamRule.TotalScore = row.TotalScore;
                _this.VExamRule.SubjectName = row.SubjectName;
                _this.VExamRule.TotalTime = row.TotalTime;
                _this.VExamRule.TotalSubject = row.TotalSubject;
                _this.VExamRule.PassScore = row.PassScore;
                _this.VExamRule.IsRead = row.IsRead;
                _this.VExamRule.IsRepeat = row.IsRepeat;
                _this.VExamRule.StartDeac = row.StartDeac;
                _this.VExamRule.EndDesc = row.EndDesc;
                _this.VExamRule.ID = index;
                axios.post('/PEMain/GetSubjectList', {
                    model: index,
                    subjectname: _this.VExamRule.SubjectName
                }).then(response => {
                    _this.ListTypeName = response.data.ListTypeName;
                    _this.RuleGrList = response.data.RuleGrList;
                    _this.ListTopicInfo = response.data.ListTopic;
                    _this.topicratioPropsVal = [];
                    _this.ListTopicInfo.forEach(function (item,index) {
                        _this.RuleGrList.forEach(function (list, num) {
                            var aaa = list.TopicLevel ? list.TopicLevel : '';
                            var string = list.TopicMajor + aaa + list.TopicType;
                            var Grstring = item.TopicMajor + item.TopicLevel + item.TopicType;
                            if (string == Grstring) {
                                _this.topicratioPropsVal.push(index+1)
                            }
                        })
                    })
                    console.log(_this.topicratioPropsVal, _this.ListTopicInfo,414);

                });
                //axios.post('/PEMain/GetSubjectList').then(response => {
                //    _this.ListTypeName = response.data.ListTypeName;
                //    _this.RuleGrList = response.data.ListTopic;

                //});
                _this.dialogFormVisible = true;
            },
            handleDelete(index, row) {
                var _this = this;
                axios.post('/PEMain/DeleteRuleInfo', {
                    model: index
                }).then(function (res) {
                    _this.tableData = res.data.tableData;
                    _this.setPaginations();
                });
            },

            editRow(index, rows) {

            },

            SearchinByRule() {
                var _this = this;
                axios.post('/PEMain/GetRuleInfo', {
                    ExamType: _this.TypeName,
                    SubjectName: _this.ExamSubject,
                    RuleName: _this.Rule
                }).then(function (res) {
                    _this.tableData = res.data.tableData;
                    _this.setPaginations();
                });
                _this.dialogFormVisible = false
            },
            deleteRow(index, TopicMajor, TopicLevel, TopicType, RuleName, ID, rows) {
                console.log(ID);
                var _this = this;
                axios.post('/PEMain/DeleteRuleTopicInfo', {
                    TopicMajor: TopicMajor,
                    TopicLevel: TopicLevel,
                    TopicType: TopicType,
                    RuleName: RuleName
                }).then(function (res) {

                    if (res.data.Result == '否') {
                        rows.splice(index, 1);
                    } else {
                        _this.RuleGrList = res.data.RuleGrList;
                    }

                });

            }
        },

    })

</script>

