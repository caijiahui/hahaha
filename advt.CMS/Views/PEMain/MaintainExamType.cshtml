@model advt.CMS.Models.ExamModel.ExamTypeModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    #app {
        padding: 20px 30px
    }
</style>
<div id="app" style="flex:1">
    <div>
        <el-input placeholder="请输入需要新增的考试类型" v-model="ExamName" class="input-with-select">
            <el-button slot="append" @@click="handleSave()">Save</el-button>
        </el-input>
        <el-table :data="LexamType.filter(data => !search || data.TypeName.toLowerCase().includes(search.toLowerCase()))"
                  style="width: 100% " :default-sort="{prop: 'TypeName', order: 'CreateUser'}">
            <el-table-column label="考试类型"
                             prop="TypeName" sortable
                             width="180">
            </el-table-column>
            <el-table-column label="创建人"
                             prop="CreateUser" sortable
                             width="180">
            </el-table-column>
            <el-table-column label="创建时间">
                <template slot-scope="scope">
                    {{format(scope.row.CreateDate)}}{{scope.row.CreateDate}}
                </template>
            </el-table-column>

            <el-table-column align="right">
                <template slot="header" slot-scope="scope">

                    <el-input v-model="search"
                              size="mini"
                              placeholder="输入关键字搜索" />
                </template>
                <template slot-scope="scope">
                    <el-button size="mini"
                               @@click="handleEdit(scope.row.ID, scope.row.TypeName)">Edit</el-button>
                    <el-button size="mini"
                               type="danger"
                               @@click="handleDelete(scope.row.ID, scope.row.TypeName)">Delete</el-button>
                </template>

            </el-table-column>
        </el-table>
        <el-dialog title="考试类型编辑" :visible.sync="dialogFormVisible">
            <el-form :model="VexamType">
                <el-form-item label="考试类型" :label-width="formLabelWidth">
                    <el-input v-model="VexamType.TypeName" autocomplete="off"></el-input>
                </el-form-item>
                <el-form-item label="修改人" :label-width="formLabelWidth">
                    <el-input v-model="VexamType.CreateUser" autocomplete="off"></el-input>
                </el-form-item>
                <el-form-item label="修改时间" :label-width="formLabelWidth">
                    <el-input v-model="VexamType.CreateDate" autocomplete="off"></el-input>
                </el-form-item>
            </el-form>
            <div slot="footer" class="dialog-footer">
                <el-button @@click="dialogFormVisible = false">取 消</el-button>
                <el-button type="primary" @@click="handleSave()">确 定</el-button>
            </div>
        </el-dialog>
    </div>
</div>
<script src="~/Scripts/Vue/Vue.js"></script>
<script src="~/Scripts/Vue/axios.js"></script>
<script src="~/Scripts/elementUI/lib/index.js"></script>
<script src="~/Scripts/Vue/polyfill.min.js"></script>
<script type="text/javascript">
    new Vue({
        el: '#app',
        data: {
            LexamType: [],
            VexamType: [],
            ExamName: '',
            dialogFormVisible: false,
            form: [],
            formLabelWidth: '120px',
            search: ''
        },
        mounted: function () {
            this.getdata();
        },

        methods: {
            handleEdit(ID, TypeName) {
               
                var _this = this;
                _this.dialogFormVisible = true;
                _this.VexamType.TypeName = TypeName;
                _this.VexamType.ID = ID
            },
            handleSave() {
                var _this = this;
                var objs = {};
                objs.VexamType = _this.VexamType;
                objs.ExamName = _this.ExamName;
                axios.post('/PEMain/SaveTypeInfo', {
                    model: objs
                }).then(function (res) {
                    _this.LexamType = res.data.LexamType;
                    _this.VexamType = [];
                    _this.ExamName = '';
                });
                _this.dialogFormVisible = false
            },
            handleDelete(index, row) {
                var _this = this;
                var ID = index;
                axios.post('/PEMain/DeleteTypeInfo', {
                    ID: ID
                }).then(function (res) {
                    _this.LexamType = res.data.LexamType;
                    _this.VexamType = [];
                    _this.ExamName = '';
                });
                _this.dialogFormVisible = false
            },
            getdata: function () {
                var _this = this;
                axios.post('/PEMain/GetTypeInfo').then(function (responese) {
                    _this.LexamType = responese.data.LexamType;
                    _this.VexamType = responese.data.VexamType;
                })
            },
            add0: function (m) {
                return m < 10 ? '0' + m : m 
            },
            format: function (shijianchuo) {
                var _this = this;
                var time = new Date(shijianchuo);
                console.log(time,135)
                var y = time.getFullYear();
                var m = time.getMonth() + 1;
                var d = time.getDate();
                var h = time.getHours();
                var mm = time.getMinutes();
                var s = time.getSeconds();
                return y + '-' + _this.add0(m) + '-' + _this.add0(d) + ' ' + _this.add0(h) + ':' + _this.add0(mm) + ':' + _this.add0(s);
            }
        }

    })


</script>

