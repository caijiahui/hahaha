@model advt.CMS.Models.ExamModel.MaintainExamPageModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link href="~/Scripts/jquery-ui.min.css" rel="stylesheet" />
<script src="~/Scripts/jquery-ui.min.js"></script>
<link href="~/Scripts/elementUI/lib/theme-chalk/index.css" rel="stylesheet" />
<style>
    .topie {
        width: 50px;
    }
</style>
<div id="app" style="margin-left: 20px; flex: 1;display:flex;flex-direction:column">
    <div>
        <el-breadcrumb separator="/" style="margin-top:20px;margin-bottom:20px">
            <el-breadcrumb-item>考试管理</el-breadcrumb-item>
            <el-breadcrumb-item>考试报表</el-breadcrumb-item>
        </el-breadcrumb>
        <el-select v-model="Search.OrgName" placeholder="请选择区域">
            <el-option v-for="item in LWorkPlace" :key="item.Key" :label="item.Value" :value="item.Key"></el-option>
        </el-select>
        <el-select v-model="Search.DepartCode" placeholder="请选择部门">
            <el-option v-for="item in ListDepartCode" :key="item" :label="item" :value="item"></el-option>
        </el-select>
        <el-select v-model="Search.TypeName" placeholder="请选择考试类型">
            <el-option v-for="item in LExamType" :key="item" :label="item" :value="item"></el-option>
        </el-select>
        <el-select v-model="Search.SubjectName" placeholder="请选择考试科目">
            <el-option v-for="item in ListSubjectName" :key="item.SubjectName" :label="item.SubjectName" :value="item.SubjectName"></el-option>
        </el-select>


        <el-input v-model="Search.UserCode" placeholder="工号" style="width:200px"></el-input>
        @*<el-input v-model="UserCode" placeholder="工号" style="width:200px"></el-input>
        <el-input v-model="SubjectName" placeholder="科目" style="width:200px"></el-input>
        <el-input v-model="DepartCode" placeholder="部门" style="width:200px"></el-input>
        <el-date-picker v-model="ExamDate" type="date" value-format="yyyy-MM-dd" placeholder="选择日期">
        </el-date-picker>*@
        <el-button type="primary" @@click="SearchDetailInfo">查询</el-button>
        <a style="color:white" :href="'/PEMain/ExportPageExcel?UserCode='+Search.UserCode+'&SubjectName='+Search.SubjectName+'&TypeName='+Search.TypeName+'&OrgName='+Search.OrgName+'&DepartCode='+Search.DepartCode">
            <el-button type="primary">
                导出
            </el-button>

        </a>
    </div>

    <div style="margin-top:20px;flex:1" ref="tableContainer">
        <el-table :data="tableData" border
                  ref="tableList"
                  :height="tableHeight"
                  :style="{'max-height':tableHeight + 'px'}"
                  style="width: 100% ">
            <el-table-column fixed label="部门代码" prop="DepartCode"></el-table-column>
            <el-table-column fixed label="工号" prop="UserCode" width="90"></el-table-column>
            <el-table-column fixed label="姓名" prop="UserName"></el-table-column>
            <el-table-column fixed label="入职日期" width="110">
                <template slot-scope="scope">
                    <span v-if="scope.row.EntryDate!=''&&scope.row.EntryDate!=null">{{changeDate(scope.row.EntryDate)}}</span>
                </template>
            </el-table-column>
            <el-table-column fixed label="职级" prop="RankName"></el-table-column>

            <el-table-column label="上次考核通过记录">
                @*//考试类型	考试科目	考试日期	考试结果	岗位等级	岗位津贴	技能津贴	专业加给	津贴总额*@
                <el-table-column label="考试类型" prop="TypeNameTwo"></el-table-column>
                <el-table-column label="考试科目" prop="SubjectNameTwo" width="110"></el-table-column>
                <el-table-column label="考试日期" width="110">
                    <template slot-scope="scope">
                        <span v-if="scope.row.ExamDateTwo!=''&&scope.row.ExamDateTwo!=null">{{changeDate(scope.row.ExamDateTwo)}}</span>
                    </template>
                </el-table-column>
                <el-table-column label="考试结果" prop="ExamResultTwo"></el-table-column>
                <el-table-column label="岗位等级" prop="PostQuotaTwo"></el-table-column>
                <el-table-column label="岗位津贴" prop="ElectronicQuotaTwo"></el-table-column>
                <el-table-column label="技能津贴" prop="SkillsAllowanceTwo"></el-table-column>
                <el-table-column label="专业加给" prop="MajorQuotaTwo"></el-table-column>
                <el-table-column label="津贴总额" prop="TotalQuotaTwo"></el-table-column>
            </el-table-column>
            <el-table-column label="当下考核通过记录">
                @*//考试类型	考试科目	考试日期	考试结果	岗位等级	岗位津贴	技能津贴	专业加给	津贴总额*@
                <el-table-column label="考试类型" prop="TypeNameOne"></el-table-column>
                <el-table-column label="考试科目" prop="SubjectNameOne" width="110"></el-table-column>
                <el-table-column label="考试日期" width="110">
                    <template slot-scope="scope">
                        <span v-if="scope.row.ExamDateOne!=''&&scope.row.ExamDateOne!=null">{{changeDate(scope.row.ExamDateOne)}}</span>
                    </template>
                </el-table-column>
                <el-table-column label="考试结果" prop="ExamResultOne"></el-table-column>
                <el-table-column label="岗位等级" prop="PostQuotaOne"></el-table-column>
                <el-table-column label="岗位津贴" prop="ElectronicQuotaOne"></el-table-column>
                <el-table-column label="技能津贴" prop="SkillsAllowanceOne"></el-table-column>
                <el-table-column label="专业加给" prop="MajorQuotaOne"></el-table-column>
                <el-table-column label="津贴总额" prop="TotalQuotaOne"></el-table-column>
            </el-table-column>
            <el-table-column label="本次考核后增加总额" prop="AddData"></el-table-column>
            <el-table-column label="生效日期" width="110">
                <template slot-scope="scope">
                    <span v-if="scope.row.TakeEffDate!=''&&scope.row.TakeEffDate!=null">{{changeTakkDate(scope.row.TakeEffDate)}}</span>
                </template>
            </el-table-column>

        </el-table>
        <el-pagination @@size-change="handleSizeChange"
                       @@current-change="handleCurrentChange"
                       :current-page="paginations.page_index"
                       :page-sizes="paginations.page_sizes"
                       :page-size="paginations.page_size"
                       :layout="paginations.layout"
                       :total="paginations.total">
        </el-pagination>
    </div>
</div>
<script src="~/Scripts/Vue/axios.js"></script>
<script src="~/Scripts/Vue/Vue.js"></script>
<script src="~/Scripts/elementUI/lib/index.js"></script>

<script src="~/Scripts/Vue/polyfill.min.js"></script>
<script type="text/javascript">
    new Vue({
        el: '#app',
        data: {
            topicratioProps: { multiple: true, label: 'Text', },
            tableData: [],
            dialogFormVisible: false,
            formLabelWidth: '120px',
            Search: {},
            LExamType: [],
            ListSubjectName: [],
            LWorkPlace: [],
            ListDepartCode:[],
            paginations: {
                page_index: 1,
                total: 0,
                page_size: 10,
                page_sizes: [10, 15, 20],
                layout: 'total, sizes, prev, pager, next, jumper'
            },
            tableHeight: null
        },
        mounted: function () {
            this.getdata();
            this.calHeight()
        },
        watch: {
            'Search.OrgName': function (newval) {
                var _this = this;
                axios.post('/PEMain/GetOrgRuleName', {
                    model: newval
                }).then(response => {
                    _this.LExamType = response.data.LExamTypess;
                    _this.ListDepartCode = response.data.ListDepartCode;
                });
            },
            'Search.DepartCode': function (newval) {
                var _this = this;
                axios.post('/PEMain/GetDepartRuleName', {
                    model: newval
                }).then(response => {
                    _this.LExamType = response.data.LExamTypess;
                });
            },
            'Search.TypeName': function (newval) {
                var _this = this;
                axios.post('/PEMain/GetRuleTypeName', {
                    model: newval
                }).then(response => {
                    _this.ListSubjectName = response.data.ListSubjectName;
                   

                });
            }
        },
        methods: {
            // 根据父元素高度改变表格高度
            calHeight: function () {
                this.$nextTick(() => {
                    // Element.getBoundingClientRect() 方法返回元素的大小及其相对于视口的位置
                    const rect = this.$refs.tableContainer.getBoundingClientRect()
                    this.tableHeight = rect.height - 155  // 若有分页，减去分页高度
                })
            },
            // 监听界面resize调calHeight更新表格高度
            onResize: function () {
                this.timer && clearTimeout(this.timer)
                this.timer = setTimeout(() => {
                    this.calHeight()
                }, 100)
            },
            getdata: function () {
                var _this = this;
                axios.post('/PEMain/GetMaintainExamPage', {
                    data: _this.Search
                    //UserCode: _this.UserCode,
                    //SubjectName: _this.SubjectName,
                    //ExamDate: _this.ExamDate,
                    //DepartCode: _this.DepartCode
                }).then(function (res) {
                    _this.tableData = res.data.tableData;
                    _this.LExamType = res.data.LExamType;
                    _this.LWorkPlace = res.data.LWorkPlace;
                    _this.setPaginations();
                });

            },
            setPaginations() {
                var _this = this;
                _this.paginations.total = _this.tableData.length; //数据的数量

                _this.paginations.page_index = 1; //默认显示第一页
                _this.paginations.page_size = 10; //每页显示多少数据

                //显示数据
                _this.tableData = _this.tableData.filter((item, index) => {
                    return index < _this.paginations.page_size;
                })
            },
            handleSizeChange(page_size) {
                var _this = this;
                _this.paginations.page_index = 1; //第一页
                _this.paginations.page_size = page_size; //每页先显示多少数据
                _this.tableData = _this.tableData.filter((item, index) => {
                    return index < page_size
                })
            },
            handleCurrentChange(page) {
                var _this = this;
                axios.post('/PEMain/GetMaintainExamPage', {
                    data: _this.Search
                    //UserCode: _this.UserCode,
                    //SubjectName: _this.SubjectName,
                    //ExamDate: _this.ExamDate,
                    //DepartCode: _this.DepartCode
                }).then(res => {
                    _this.tableData = res.data.tableData;
                    //_this.LExamType = res.data.LExamType;
                    _this.LWorkPlace = res.data.LWorkPlace;
                    let index = _this.paginations.page_size * (page - 1);
                    //获取总数
                    let allData = _this.paginations.page_size * page;
                    let tablist = [];
                    for (let i = index; i < allData; i++) {
                        if (_this.tableData[i]) {
                            tablist.push(_this.tableData[i]);
                        }
                    }
                    _this.tableData = tablist;
                })

            },
            changeDate: function (dates) {
                var date = new Date(parseInt(dates.replace("/Date(", "").replace(")/", ""), 10));
                Y = date.getFullYear() + '-';
                M = (date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1) + '-';
                D = (date.getDate() < 10 ? '0' + (date.getDate()) : date.getDate()) + ' ';
                h = (date.getHours() < 10 ? '0' + (date.getHours()) : date.getHours()) + ':';
                m = (date.getMinutes() < 10 ? '0' + (date.getMinutes()) : date.getMinutes()) + ':';
                s = (date.getSeconds() < 10 ? '0' + (date.getSeconds()) : date.getSeconds());
                var NewDtime = Y + M + D + h + m + s;
                var listDate = new Date(date);
                var year = listDate.getFullYear();
                var mon = listDate.getMonth() + 1;
                var day = listDate.getDate();
                return year + '-' + mon + '-' + day;
            },
            changeTakkDate: function (dates) {
                var date = new Date(parseInt(dates.replace("/Date(", "").replace(")/", ""), 10));
                Y = date.getFullYear() + '-';
                M = (date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1) + '-';
                D = (date.getDate() < 10 ? '0' + (date.getDate()) : date.getDate()) + ' ';
                h = (date.getHours() < 10 ? '0' + (date.getHours()) : date.getHours()) + ':';
                m = (date.getMinutes() < 10 ? '0' + (date.getMinutes()) : date.getMinutes()) + ':';
                s = (date.getSeconds() < 10 ? '0' + (date.getSeconds()) : date.getSeconds());
                var NewDtime = Y + M + D + h + m + s;
                var listDate = new Date(date);
                var year = listDate.getFullYear();
                var mon = listDate.getMonth() + 1;
                var day = listDate.getDate();
                return year + '-' + mon + '-' + "01";
            },
            changeallDate: function (dates) {
                var date = new Date(parseInt(dates.replace("/Date(", "").replace(")/", ""), 10));
                Y = date.getFullYear() + '-';
                M = (date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1) + '-';
                D = (date.getDate() < 10 ? '0' + (date.getDate()) : date.getDate()) + ' ';
                h = (date.getHours() < 10 ? '0' + (date.getHours()) : date.getHours()) + ':';
                m = (date.getMinutes() < 10 ? '0' + (date.getMinutes()) : date.getMinutes()) + ':';
                s = (date.getSeconds() < 10 ? '0' + (date.getSeconds()) : date.getSeconds());
                
                var NewDtime = Y + M + D + h + m + s;
                var listDate = new Date(date);
                var year = listDate.getFullYear();
                var mon = listDate.getMonth() + 1;
                var day = listDate.getDate();
                return NewDtime;
            },
            SearchDetailInfo() {
                var _this = this;
                axios.post('/PEMain/GetMaintainExamPage', {
                    data: _this.Search
                    //UserCode: _this.UserCode,
                    //SubjectName: _this.SubjectName,
                    //ExamDate: _this.ExamDate,
                    //DepartCode: _this.DepartCode
                }).then(function (res) {
                    _this.tableData = res.data.tableData;
                    //_this.LExamType = res.data.LExamType;
                    _this.LWorkPlace = res.data.LWorkPlace;
                    _this.setPaginations();
                });
            },
        },

    })

</script>

