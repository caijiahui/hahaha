@model advt.CMS.Models.ExamModel.ExamSubjectModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link href="~/Scripts/elementUI/lib/theme-chalk/index.css" rel="stylesheet" />


<div id="app" style="margin-left:20px">
    <template>
        <el-breadcrumb separator="/" style="margin-top:20px;margin-bottom:20px">
            <el-breadcrumb-item>考试管理</el-breadcrumb-item>
            <el-breadcrumb-item>考试科目</el-breadcrumb-item>
        </el-breadcrumb>
        <el-select v-model="TypeNames" placeholder="请选择考试类型">
            <el-option v-for="item in LExamType" :key="item.Key" :label="item.Value" :value="item.Key"></el-option>
        </el-select>
        <el-input placeholder="输入科目" v-model="SubjectNames" style="width:200px">
        </el-input>
        <el-button slot="append" @@click="SearchinBySubjectName">Search</el-button>
        <el-button @@click="createSubject">新增</el-button>
    </template>


    <div style="margin-top:20px">
        <el-table :data="tableData"
                  style="width: 100% ">
            <el-table-column label="考试类型" prop="TypeName" sortable></el-table-column>
            <el-table-column label="考试科目" prop="SubjectName" sortable></el-table-column>
            <el-table-column label="部门代码" prop="DepartCode" sortable></el-table-column>
            <el-table-column label="HC限制" prop="HCLimit" sortable></el-table-column>
            <el-table-column label="津贴额度" prop="ElectronicQuota" sortable></el-table-column>
            <el-table-column label="专业加给" prop="MajorQuota" sortable></el-table-column>
            <el-table-column label="是否系统串实践"
                             prop="IsSysPractice"
                             width="150"
                             filter-placement="bottom-end">
                <template slot-scope="scope">
                    <div class="lst-box" :class="scope.row.IsSysPractice? 'el-icon-check' : 'el-icon-close'">
                    </div>
                </template>
            </el-table-column>
            <el-table-column label="是否跨制程考核"
                             prop="IsProAssess"
                             width="150"
                             filter-placement="bottom-end">
                <template slot-scope="scope">
                    <div class="lst-box" :class="scope.row.IsProAssess? 'el-icon-check' : 'el-icon-close'">
                    </div>
                </template>
            </el-table-column>

            <el-table-column label="创建人" prop="CreateUser" sortable></el-table-column>
            <el-table-column label="创建时间"
                             width="120">
                <template slot-scope="scope">
                    <span>{{changeDate(scope.row.CreateDate)}}</span>
                </template>
            </el-table-column>
            <el-table-column align="right">
                <template slot="header" slot-scope="scope">
                    <el-input v-model="search" size="mini" placeholder="输入关键字搜索" style="width:200px" />
                </template>
                <template slot-scope="scope">
                    <el-button size="mini"
                               @@click="handleEdit(scope.row.ID,scope.row.SubjectName,scope.row.TypeName,scope.row.HCLimit,scope.row.IsSysPractice,scope.row.IsProAssess,scope.row.DepartCode,scope.row.ElectronicQuota,scope.row.MajorQuota, scope.row)">Edit</el-button>
                    <el-button size="mini"
                               type="danger"
                               @@click="handleDelete(scope.row.ID, scope.row)">Delete</el-button>
                </template>
            </el-table-column>
        </el-table>
        <el-pagination @@size-change="handleSizeChange"
                       @@current-change="handleCurrentChange"
                       :current-page="paginations.page_index"
                       :page-sizes="paginations.page_sizes"
                       :page-size="paginations.page_size"
                       :layout="paginations.layout"
                       :total="paginations.total">
        </el-pagination>
        <el-dialog title="考试科目编辑" :visible.sync="dialogFormVisible" :close-on-click-modal="false">
            <el-form :model="VexamSubject" ref="dialogForm">
                <el-form-item label="考试类型" :label-width="formLabelWidth">
                    <el-select v-model="VexamSubject.TypeName" placeholder="请选择考试类型">
                        <el-option v-for="item in ListTypeName" :key="item.TypeName" :label="item.TypeName" :value="item.TypeName"></el-option>
                    </el-select>
                </el-form-item>
                <el-form-item label="考试科目" :label-width="formLabelWidth">
                    <el-input v-model="VexamSubject.SubjectName" autocomplete="off"></el-input>
                </el-form-item>
                @*<el-form-item label="部门代码" :label-width="formLabelWidth">
            <el-input v-model="VexamSubject.DepartCode" autocomplete="off"></el-input>
        </el-form-item>*@
                <el-form-item label="HC限制" :label-width="formLabelWidth">
                    <el-input v-model="VexamSubject.HCLimit" autocomplete="off"></el-input>
                </el-form-item>
                <el-form-item label="津贴额度" :label-width="formLabelWidth">
                    <el-input v-model="VexamSubject.ElectronicQuota" autocomplete="off"></el-input>
                </el-form-item>
                <el-form-item label="专业加给" :label-width="formLabelWidth">
                    <el-input v-model="VexamSubject.MajorQuota" autocomplete="off"></el-input>
                </el-form-item>
                <el-form-item label="是否系统串实践" prop="IsSysPractice">
                    <el-switch v-model="VexamSubject.IsSysPractice"></el-switch>
                </el-form-item>

                <el-form-item label="是否跨制程考核" prop="IsProAssess">
                    <el-switch v-model="VexamSubject.IsProAssess"></el-switch>
                </el-form-item>
            </el-form>
            <div slot="footer" class="dialog-footer">
                <template>
                    <el-button @@click="dialogFormVisible = false">取 消</el-button>
                    <el-button type="primary" @@click="handleSave">确 定</el-button>
                </template>

            </div>
        </el-dialog>

    </div>
</div>
<script src="~/Scripts/Vue/axios.js"></script>
<script src="~/Scripts/Vue/Vue.js"></script>
<script src="~/Scripts/elementUI/lib/index.js"></script>

<script src="~/Scripts/Vue/polyfill.min.js"></script>
<script type="text/javascript">
    new Vue({
        el: '#app',
        data: {
            tableData: [],
            dialogFormVisible: false,
            ListTypeName: [],
            VexamSubject: [],
            formLabelWidth: '120px',
            search: '',
            SubjectNames: '',
            LExamType: [],
            TypeNames:'',
            paginations: {
                page_index: 1, 
                total: 0,
                page_size:10,
                page_sizes: [10,15, 20], 
                layout: 'total, sizes, prev, pager, next, jumper'
            }
        },
        mounted: function () {
            var _this = this;
            _this.getInfoList();
        },
        methods: {
           
            getInfoList() {
                var _this = this;
                axios.post('/PEMain/GetSubjectInfo').then(res => {
                    _this.tableData = res.data.tableData;
                    _this.LExamType = res.data.LExamType;
                    _this.VexamSubject = res.data.VexamSubject;
                    _this.setPaginations();
                })
            },
            setPaginations() {
                var _this = this;
                _this.paginations.total = _this.tableData.length; //数据的数量
                _this.paginations.page_index = 1; //默认显示第一页
                _this.paginations.page_size = 10; //每页显示多少数据

                //显示数据
                _this.tableData = _this.tableData.filter((item, index) => {
                    return index < _this.paginations.page_size;
                })
            },
            handleSizeChange(page_size) {
                var _this = this;
                _this.paginations.page_index = 1; //第一页
                _this.paginations.page_size = page_size; //每页先显示多少数据
                _this.tableData = _this.tableData.filter((item, index) => {
                    return index < page_size
                })
            },
            handleCurrentChange(page) {   
                var _this = this;
                axios.post('/PEMain/GetSubjectInfo', {
                    ExamType: _this.TypeNames,
                    SubjectName: _this.SubjectNames
                }).then(res => {
                    _this.tableData = res.data.tableData;
                    let index = _this.paginations.page_size * (page - 1);
                    //获取总数
                    let allData = _this.paginations.page_size * page;
                    console.log(_this.tableData, 133);
                  
                    let tablist = [];
                    for (let i = index; i < allData; i++) {

                        if (_this.tableData[i]) {
                            tablist.push(_this.tableData[i]);
                        }
                    }
                    _this.tableData = tablist;
                })            
              
          
            },
            changeDate: function (dates) {
                var date = new Date(parseInt(dates.replace("/Date(", "").replace(")/", ""), 10));
                Y = date.getFullYear() + '-';
                M = (date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1) + '-';
                D = (date.getDate() < 10 ? '0' + (date.getDate()) : date.getDate()) + ' ';
                h = (date.getHours() < 10 ? '0' + (date.getHours()) : date.getHours()) + ':';
                m = (date.getMinutes() < 10 ? '0' + (date.getMinutes()) : date.getMinutes()) + ':';
                s = (date.getSeconds() < 10 ? '0' + (date.getSeconds()) : date.getSeconds());
                var NewDtime = Y + M + D + h + m + s;
                var listDate = new Date(date);
                var year = listDate.getFullYear();
                var mon = listDate.getMonth() + 1;
                var day = listDate.getDate();
                return year + '-' + mon + '-' + day;
            },
            createSubject: function () {
                var _this = this;
                axios.post('/PEMain/GetSubjectList').then(response => {
                    _this.ListTypeName = response.data.ListTypeName;
                    _this.VexamSubject = {};
                });
                _this.dialogFormVisible = true;
               
            },
            handleSave: function () {
                var _this = this;
                var objs = {};
                objs.VexamSubject = _this.VexamSubject;
                axios.post('/PEMain/SaveSubjectInfo', {
                    model: objs
                }).then(function (res) {
                    if (res.data.Result != '') {
                        _this.$message.error(res.data.Result);
                    } else {
                        _this.tableData = res.data.tableData;
                        _this.setPaginations();
                    }
                });
                _this.dialogFormVisible = false;           

            },
            handleEdit(index, name, tname, HCLimit, IsSysPractice, IsProAssess, DepartCode, ElectronicQuota, MajorQuota,row) {
                var _this = this;
                _this.VexamSubject.SubjectName = name;
                _this.VexamSubject.TypeName = tname;
                _this.VexamSubject.ID = index;
                _this.VexamSubject.HCLimit = HCLimit;
                _this.VexamSubject.IsSysPractice = IsSysPractice;
                _this.VexamSubject.IsProAssess = IsProAssess;
                _this.VexamSubject.DepartCode = DepartCode;
                _this.VexamSubject.ElectronicQuota = ElectronicQuota;
                _this.VexamSubject.MajorQuota = MajorQuota;
                axios.post('/PEMain/GetSubjectList').then(response => {
                    _this.ListTypeName = response.data.ListTypeName;

                });
                _this.dialogFormVisible = true;
            },
            handleDelete(index, row) {
                this.$confirm('此规则将被删除, 是否继续?', '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(() => {
                    var _this = this;
                    axios.post('/PEMain/DeleteSubject', {
                        model: index
                    }).then(function (res) {
                        _this.tableData = res.data.tableData;
                        _this.setPaginations();
                    });
                }).catch(() => {
                    this.$message({
                        type: 'info',
                        message: '已取消删除'
                    });
                });
                
            },
           
            SearchinBySubjectName() {
                var _this = this;
                axios.post('/PEMain/GetSubjectInfo', {
                    ExamType: _this.TypeNames,
                    SubjectName: _this.SubjectNames
                }).then(function (res) {
                    _this.tableData = res.data.tableData;
                    _this.setPaginations();
                    });
                _this.dialogFormVisible = false
            }
           
        },

    })

</script>



