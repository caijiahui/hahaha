@model advt.CMS.Models.ExamPageModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>答题页</title>
    <link href="~/Scripts/css/font-awesome.css" rel="stylesheet" />
    <link href="~/Scripts/elementUI/lib/theme-chalk/index.css" rel="stylesheet" />
    <link href="~/Scripts/css/exam.css" rel="stylesheet" />
    <style>
        .pro-ans-con .el-radio__input, .pro-ans-con .el-checkbox__input {
            vertical-align: top;
        }
        .pro-ans-con .el-radio-group label, .pro-ans-con .el-checkbox-group label{
            display: block !important;
        }
    </style>
</head>
<body>
    <div id="app" v-cloak>
        <div class="wrap">
            <div class="header">
                <div class="sub-title"><h1>{{VExamUserInfo.ExamType}}</h1></div>
            </div>
            <div style="width:30%;">
                <el-card class="box-card">
                    <div slot="header" class="clearfix">
                        <span>温馨提示：{{VExamUserInfo.StartDesc}}</span>
                    </div>
                    <div class="text item">
                        <i class="el-icon-user"></i>  {{VExamUserInfo.UserName}}
                    </div>
                    <div class="text item">
                        <i class="el-icon-circle-check"></i>  {{VExamUserInfo.PassScore}}分<i class="el-icon-arrow-right"></i><i class="el-icon-user"></i><i class="el-icon-arrow-right"></i>{{VExamUserInfo.TotalScore}}分
                    </div>
                    <div class="text item">
                        <i class="el-icon-alarm-clock"></i>  {{minute}}:{{second}}
                    </div>
                </el-card>
            </div>
            
            <div class="content">
                <div style="margin-bottom:20px">
                    <el-card class="box-card">
                        <div><strong>{{nowItem}}.{{examList.proName}}({{examList.TopicLevel }} {{examList.TopicMajor}} {{examList.ExamTypeName}}) </strong></div>
                        <div><img v-if="examList.TopicTitlePic!=''&&examList.TopicTitlePic!=null" :src="'/Attachment/BankPic/'+examList.TopicTitlePic" width="100" height="100" /></div>
                    </el-card>

                </div>
               
                <div class="pro-ansower">
                    <el-form :model="examList" :rules="rules" ref="ruleForm" class="demo-ruleForm">
                        <div class="pro-ans-con">
                            <el-form-item prop="selectItem">
                                <el-radio-group v-if="examList.type==0" v-model="examList.selectItem">
                                    <el-radio :label="index" v-for="(item,index) in examList.ansowerList">
                                        <div>{{abcChange(index)}}、{{item.ansower}}</div>
                                        <div><img v-if="item.ansowerpic!=''&&item.ansowerpic!=null" :src="'/Attachment/BankPic/'+item.ansowerpic" width="100" height="100" /></div>
                                    </el-radio>
                                </el-radio-group>
                                <el-checkbox-group v-if="examList.type==1" v-model="examList.selectItem">
                                    <el-checkbox :label="index.toString()" v-for="(item,index) in examList.ansowerList">
                                        <div>{{abcChange(index)}}、{{item.ansower}}</div>
                                        <div> <img v-if="item.ansowerpic!=''&&item.ansowerpic!=null" :src="'/Attachment/BankPic/'+item.ansowerpic" :width="100" height="100" /></div>
                                    </el-checkbox>
                                </el-checkbox-group>
                                <el-input type="textarea" :clearable='true' :rows="2" resize="none" :autosize="{ minRows: 4}" v-model="examList.selectItem" v-if="examList.type==2"></el-input>
                            </el-form-item>
                        </div>
                        <div class="footer">
                            <div class="footer-btn-box">
                                <div>
                                    <el-button class="pro-btn" @@click="preBtn()">上一题</el-button>
                                </div>
                                <div>
                                    <el-button class="pro-btn" @@click="submitForm('ruleForm')">{{nowItem==total?'确认提交':'下一题'}}</el-button>
                                </div>
                            </div>
                            <el-divider>{{nowItem}}/{{total}} 题</el-divider>
                            <!-- <p>{{nowItem}}/{{total}} 题</p> -->
                        </div>
                    </el-form>


                </div>

            </div>


        </div>
    </div>

    <!-- end #container -->
    <script src="~/Scripts/Vue/Vue.js"></script>
    <script src="~/Scripts/Vue/axios.js"></script>
    <script src="~/Scripts/elementUI/lib/index.js"></script>
    <script src="~/Scripts/Vue/polyfill.min.js"></script>
    <!-- Yoursite Scripts -->
    <script>
        new Vue({
            el: "#app",
            data: {
                nowyear: '',
                isMobileTurn: false,
                admin: 'Admin',
                isCollapse: true,
                total: [],      //一共多少题  后台获取
                nowItem: [],     //当前的题目  后台获取
                //examList: [],
                examList: {},
                ListBankView: {},
                VExamUserInfo: {},
                minutes: [],
                seconds: 0,
                //examList: {

                //    selectItem: '',   //用户答案 type为0时 类型为''   type为1时 类型为[]   type为2时 类型为''
                //    type: 0,      //0 单选题  1 多选题  2 问答题
                //    proName: '在 HTML 页面中包含一个按钮控件 mybutton ，如果要实现点击该按钮时调用已定义的 JavaScript 函数 compute ，要编写的 HTML 代码是()',
                //    ansower: 4,     //当前题目正确答案
                //    ansowerList: ['<input name=”mybutton” type=”button” onBlur=”compute()” value=”计算”>', '<input name=”mybutton” type=”button” onFocus=”compute()” value=”计算”>', '<input name=”mybutton” type=”button” onClick=”function compute()” value=”计算”>', '<input name=”mybutton” type=”button” onClick=”compute()” value=”计算”>']
                //},
                rules: {
                    selectItem: [
                        { required: true, message: '请填写答案！', trigger: 'blur' }
                    ]

                }
            },
            mounted: function () {
                var date = new Date();
                this.nowyear = date.getFullYear();

                if (this.isMobile()) {
                    this.isMobileTurn = true
                } else {
                    this.isMobileTurn = false
                }
                this.getdata();
                this.add();
                console.log(this.isMobileTurn)
            },
            watch: {
                'examList.selectItem': function (newval) {
                    console.log(newval, 232);
                },
                second: {
                    handler(newVal) {
                        this.num(newVal)
                    }
                },
                minute: {
                    handler(newVal) {
                        this.num(newVal)
                    }
                }
            },
            computed: {
                second: function () {
                    return this.num(this.seconds)
                },
                minute: function () {
                    return this.num(this.minutes)
                }


            },
            methods: {
                num: function (n) {
                    return n < 10 ? '0' + n : '' + n
                },
                add() {
                    var _this = this
                    var time = window.setInterval(function () {
                        if (_this.seconds === 0 && _this.minutes !== 0) {
                            _this.seconds = 59
                            _this.minutes -= 1
                        } else if (_this.minutes === 0 && _this.seconds === 0) {
                            _this.seconds = 0
                            window.clearInterval(time)

                        } else {
                            _this.seconds -= 1
                        }
                    }, 1000)
                },
                isMobile: function () {
                    let flag = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i)
                    return flag
                },
                submitForm: function (formName) {
                    var _this = this;
                    this.$refs[formName].validate(function (valid) {
                        if (valid) {
                            _this.examList.LselectItem = [];
                            if (_this.examList.type == 1) {
                                for (var i = 0; i < _this.examList.selectItem.length; i++) {
                                    if (_this.examList.selectItem[i] == '0') {
                                        _this.examList.LselectItem.push('A')
                                    } else if (_this.examList.selectItem[i] == '1') {
                                        _this.examList.LselectItem.push('B')
                                    } else if (_this.examList.selectItem[i] == '2') {
                                        _this.examList.LselectItem.push('C')
                                    } else if (_this.examList.selectItem[i] == '3') {
                                        _this.examList.LselectItem.push('D')
                                    } else if (_this.examList.selectItem[i] == '4') {
                                        _this.examList.LselectItem.push('E')
                                    } else if (_this.examList.selectItem[i] == '5') {
                                        _this.examList.LselectItem.push('F')
                                    }
                                }
                            }
                            else if (_this.examList.type == 0) {
                                if (_this.examList.selectItem == 0) {
                                    _this.examList.LselectItem.push('A')
                                } else if (_this.examList.selectItem == 1) {
                                    _this.examList.LselectItem.push('B')
                                } else if (_this.examList.selectItem == 2) {
                                    _this.examList.LselectItem.push('C')
                                } else if (_this.examList.selectItem == 3) {
                                    _this.examList.LselectItem.push('D')
                                } else if (_this.examList.selectItem == 4) {
                                    _this.examList.LselectItem.push('E')
                                } else if (_this.examList.selectItem == 5) {
                                    _this.examList.LselectItem.push('F')
                                }
                            }
                            else if (_this.examList.type == 2) {
                                _this.examList.LselectItem = _this.examList.selectItem;
                            }
                            console.log(_this.examList.selectItem, 343);
                            console.log(_this.examList.type,344);
                            //判断是否是模拟
                            _this.VExamUserInfo.IsTest = true;
     
                            if (_this.VExamUserInfo.IsTest) {
                                //单选多选判断对错,填空直接往下
                                if (_this.examList.type == 1 || _this.examList.type == 0) {
                                    if (_this.examList.LselectItem.sort().toString() != _this.examList.RightKey.sort().toString()) {
                                        console.log(_this.examList.LselectItem.sort().toString(), 1111)
                                        console.log(_this.examList.RightKey.sort().toString(), 222)
                                        console.log("答案不正确", 333);
                                        //_this.$alert('答案解析:<br>' + _this.examList.Remark, '正确答案:' + _this.examList.RightKey.sort().toString(), {
                                        //    dangerouslyUseHTMLString: true
                                        //});
                                        //return;
                                        _this.$confirm('答案解析:<br>' + _this.examList.Remark, '正确答案:' + _this.examList.RightKey.sort().toString(), {
                                            confirmButtonText: '下一题',
                                            cancelButtonText: '取消',
                                        }).then(() => {
                                            var obj = {};
                                            obj.examList = _this.examList;
                                            obj.nowItem = _this.nowItem;
                                            obj.total = _this.total;
                                            obj.ListBankView = _this.ListBankView;
                                            obj.VExamUserInfo = _this.VExamUserInfo;
                                            obj.LselectItem = _this.LselectItem;
                                            console.log(_this.examList.selectItem, 345);
                                            if (_this.nowItem == _this.total) {     //第二个按钮最后为提交事件
                                                obj.examList = _this.examList;
                                                obj.ListBankView = _this.ListBankView;
                                                obj.VExamUserInfo = _this.VExamUserInfo;
                                                axios.post('/PEMain/InsertScore', {
                                                    model: obj
                                                }).then(function (res) {

                                                });
                                                window.location.href = "/PEMain/ExamFinish";

                                            } else {
                                                obj.PreNext = "Next";
                                                axios.post('/PEMain/NextTopic', {
                                                    model: obj
                                                }).then(function (res) {
                                                    _this.examList = res.data.examList;

                                                    _this.total = res.data.total;
                                                    _this.nowItem = res.data.nowItem;
                                                    _this.ListBankView = res.data.ListBank;
                                                    _this.VExamUserInfo = res.data.VExamUserInfo;
                                                    console.log(_this.examList, 6565);
                                                    if (_this.examList.selectItem == null) {
                                                        _this.examList.selectItem = []
                                                    }
                                                    if (_this.examList.LselectItem == null) {
                                                        _this.examList.LselectItem = []
                                                    }
                                                    if (res.data.examList.type == 1) {
                                                        _this.examList.selectItem = []
                                                    }
                                                    else if (res.data.examList.type == 0) {
                                                        _this.examList.selectItem = parseFloat(_this.examList.selectItem[0])
                                                    }
                                                    else {
                                                        _this.examList.selectItem = '';
                                                    }


                                                });
                                            }
                                        }).catch(() => {
                                            return;
                                        });




                                        //const h = _this.$createElement;
                                        //_this.$msgbox({
                                        //    title: '正确答案:' + _this.examList.RightKey.sort().toString(),
                                        //    message: h('p', null, [
                                        //        h('span', null, '答案解析:<br>' + _this.examList.Remark),
                                        //    ]),
                                        //    showCancelButton: true,
                                        //    confirmButtonText: '下一题',
                                        //    cancelButtonText: '取消',
                                        //    beforeClose: (action, instance, done) => {
                                        //        console.log(action, 454)
                                        //        if (action === 'confirm') {
                                        //            IsCon = true;
                                        //            done();
                                        //            console.log(IsCon, 4444);
                                        //        } else {
                                        //            done();
                                        //        }
                                        //    }
                                        //});
                                    }
                                    else {
                                            var obj = {};
                                            obj.examList = _this.examList;
                                            obj.nowItem = _this.nowItem;
                                            obj.total = _this.total;
                                            obj.ListBankView = _this.ListBankView;
                                            obj.VExamUserInfo = _this.VExamUserInfo;
                                            obj.LselectItem = _this.LselectItem;
                                            console.log(_this.examList.selectItem, 345);
                                            if (_this.nowItem == _this.total) {     //第二个按钮最后为提交事件
                                                obj.examList = _this.examList;
                                                obj.ListBankView = _this.ListBankView;
                                                obj.VExamUserInfo = _this.VExamUserInfo;
                                                axios.post('/PEMain/InsertScore', {
                                                    model: obj
                                                }).then(function (res) {
                                                    window.location.href = "/PEMain/ExamFinish";
                                                });
                                               

                                            } else {
                                                obj.PreNext = "Next";
                                                axios.post('/PEMain/NextTopic', {
                                                    model: obj
                                                }).then(function (res) {
                                                    _this.examList = res.data.examList;

                                                    _this.total = res.data.total;
                                                    _this.nowItem = res.data.nowItem;
                                                    _this.ListBankView = res.data.ListBank;
                                                    _this.VExamUserInfo = res.data.VExamUserInfo;
                                                    console.log(_this.examList, 6565);
                                                    if (_this.examList.selectItem == null) {
                                                        _this.examList.selectItem = []
                                                    }
                                                    if (_this.examList.LselectItem == null) {
                                                        _this.examList.LselectItem = []
                                                    }
                                                    if (res.data.examList.type == 1) {
                                                        _this.examList.selectItem = []
                                                    }
                                                    else if (res.data.examList.type == 0) {
                                                        _this.examList.selectItem = parseFloat(_this.examList.selectItem[0])
                                                    }
                                                    else {
                                                        _this.examList.selectItem = '';
                                                    }


                                                });
                                            }
                                    }
                                }

                              
                            }
                            if (_this.VExamUserInfo.IsTest == false || _this.examList.type==2) {
                                var obj = {};
                                obj.examList = _this.examList;
                                obj.nowItem = _this.nowItem;
                                obj.total = _this.total;
                                obj.ListBankView = _this.ListBankView;
                                obj.VExamUserInfo = _this.VExamUserInfo;
                                obj.LselectItem = _this.LselectItem;
                                console.log(_this.examList.selectItem, 345);
                                if (_this.nowItem == _this.total) {     //第二个按钮最后为提交事件
                                    obj.examList = _this.examList;
                                    obj.ListBankView = _this.ListBankView;
                                    obj.VExamUserInfo = _this.VExamUserInfo;
                                    axios.post('/PEMain/InsertScore', {
                                        model: obj
                                    }).then(function (res) {

                                    });
                                    window.location.href = "/PEMain/ExamFinish";

                                } else {
                                    obj.PreNext = "Next";
                                    axios.post('/PEMain/NextTopic', {
                                        model: obj
                                    }).then(function (res) {
                                        _this.examList = res.data.examList;

                                        _this.total = res.data.total;
                                        _this.nowItem = res.data.nowItem;
                                        _this.ListBankView = res.data.ListBank;
                                        _this.VExamUserInfo = res.data.VExamUserInfo;
                                        console.log(_this.examList, 6565);
                                        if (_this.examList.selectItem == null) {
                                            _this.examList.selectItem = []
                                        }
                                        if (_this.examList.LselectItem == null) {
                                            _this.examList.LselectItem = []
                                        }
                                        if (res.data.examList.type == 1) {
                                            _this.examList.selectItem = []
                                        }
                                        else if (res.data.examList.type == 0) {
                                            _this.examList.selectItem = parseFloat(_this.examList.selectItem[0])
                                        }
                                        else {
                                            _this.examList.selectItem = '';
                                        }


                                    });
                                }
                            }
                           
                        } else {
                            console.log('error submit!!');
                            return false;
                        }
                    });
                },
                preBtn: function () {
                    var _this = this;
                    console.log(_this.examList);
                    var objs = {};
                    objs.examList = _this.examList;
                    objs.LselectItem = _this.LselectItem;
                    objs.nowItem = _this.nowItem;
                    objs.total = _this.total;
                    objs.ListBankView = _this.ListBankView;
                    console.log(objs.ListBankView, 2323);
                    objs.VExamUserInfo = _this.VExamUserInfo;
                    objs.PreNext = "Pre";
                    axios.post('/PEMain/NextTopic', {
                        model: objs
                    }).then(function (res) {
                        console.log(res.data.examList, 888);
                        _this.examList = res.data.examList;
                        _this.total = res.data.total;
                        _this.nowItem = res.data.nowItem;
                        _this.ListBankView = res.data.ListBank;
                        _this.VExamUserInfo = res.data.VExamUserInfo;
                        if (_this.examList.selectItem == null) {
                            _this.examList.selectItem = []
                        }
                        if (_this.examList.LselectItem == null) {
                            _this.examList.LselectItem = []
                        }
                        else if (res.data.examList.type == 0) {
                            _this.examList.selectItem = parseFloat(_this.examList.selectItem[0])
                        }
                        else if (res.data.examList.type==2) {
                            _this.examList.selectItem = _this.examList.selectItem[0].toString();
                        }
                        console.log(_this.examList.selectItem,999);



                    });
                },
                abcChange: function (val) {
                    if (val == 0) {
                        return 'A'
                    } else if (val == 1) {
                        return 'B'
                    } else if (val == 2) {
                        return 'C'
                    } else if (val == 3) {
                        return 'D'
                    } else if (val == 4) {
                        return 'E'
                    } else if (val == 5) {
                        return 'F'
                    }
                },
                getdata: function () {
                    var _this = this;
                    axios.post('/PEMain/Test').then(function (responese) {
                        console.log(responese.data.examList, 23);
                        _this.examList = responese.data.examList;
                        _this.VExamUserInfo = responese.data.VExamUserInfo;
                        if (_this.examList.selectItem == null) {
                            _this.examList.selectItem = []
                        }
                        if (responese.data.examList.type == 1) {
                            _this.examList.selectItem = []
                        }
                        else if (responese.data.examList.type == 0) {
                            _this.examList.selectItem = parseFloat(_this.examList.selectItem[0])
                        }
                        else {
                            _this.examList.selectItem = ''
                        }
                        if (_this.examList.LselectItem == null) {
                            _this.examList.LselectItem = []
                        }
                        _this.minutes = responese.data.VExamUserInfo.TotalTime;

                        _this.total = responese.data.total;
                        _this.nowItem = responese.data.nowItem;
                        _this.ListBankView = responese.data.ListBankView
                        console.log(responese.model);
                    })
                }
            }

        })
    </script>
</body>
</html>

